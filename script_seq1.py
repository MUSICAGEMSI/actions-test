from dotenv import load_dotenv
load_dotenv(dotenv_path="credencial.env")

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
import os
import re
import requests
import time
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor, as_completed
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from datetime import datetime
import json
import asyncio
import aiohttp
from typing import List, Dict, Optional, Set
from collections import deque
import threading

# ==================== CONFIGURA√á√ïES GLOBAIS ====================
EMAIL = os.environ.get("LOGIN_MUSICAL")
SENHA = os.environ.get("SENHA_MUSICAL")
URL_INICIAL = "https://musical.congregacao.org.br/"

# URLs dos Apps Scripts
URL_APPS_SCRIPT_LOCALIDADES = 'https://script.google.com/macros/s/AKfycbzJv9YlseCXdvXwi0OOpxh-Q61rmCly2kMUBEtcv5VSyPEKdcKg7MAVvIgDYSM1yWpV/exec'
URL_APPS_SCRIPT_HISTORICO = 'https://script.google.com/macros/s/AKfycbwByAvTIdpefgitKoSr0c3LepgfjsAyNbbEeV3krU1AkNEZca037RzpgHRhjmt-M8sesg/exec'

# M√ìDULO 1: LOCALIDADES
LOCALIDADES_RANGE_INICIO = 20390
LOCALIDADES_RANGE_FIM = 20392
LOCALIDADES_NUM_THREADS = 20

# M√ìDULO 3: HIST√ìRICO - Configura√ß√£o h√≠brida
HISTORICO_ASYNC_CONNECTIONS = 250
HISTORICO_ASYNC_TIMEOUT = 4
HISTORICO_ASYNC_MAX_RETRIES = 2
HISTORICO_FALLBACK_TIMEOUT = 12
HISTORICO_FALLBACK_RETRIES = 4
HISTORICO_CIRURGICO_TIMEOUT = 20
HISTORICO_CIRURGICO_RETRIES = 6
HISTORICO_CIRURGICO_DELAY = 2
HISTORICO_CHUNK_SIZE = 400

# Configura√ß√£o de lotes para envio ao Google Sheets
LOTE_TAMANHO = 200
LOTE_TIMEOUT = 90

if not EMAIL or not SENHA:
    print("‚ùå Erro: Credenciais n√£o definidas")
    exit(1)

# Stats para hist√≥rico
historico_stats = {
    'fase1_sucesso': 0,
    'fase1_falha': 0,
    'fase2_sucesso': 0,
    'fase2_falha': 0,
    'fase3_sucesso': 0,
    'fase3_falha': 0,
    'com_dados': 0,
    'sem_dados': 0,
    'tempo_inicio': None,
    'tempos_resposta': deque(maxlen=200),
    'alunos_processados': set()
}
stats_lock = threading.Lock()
print_lock = threading.Lock()

# ==================== FUN√á√ïES AUXILIARES ====================

def safe_print(msg):
    with print_lock:
        print(msg, flush=True)

def criar_sessao_robusta():
    """Cria sess√£o HTTP com retry autom√°tico"""
    session = requests.Session()
    retry_strategy = Retry(
        total=3,
        backoff_factor=1,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["GET", "POST", "HEAD"]
    )
    adapter = HTTPAdapter(
        pool_connections=20,
        pool_maxsize=20,
        max_retries=retry_strategy
    )
    session.mount('https://', adapter)
    session.mount('http://', adapter)
    return session

def extrair_cookies_playwright(pagina):
    """Extrai cookies do Playwright"""
    cookies = pagina.context.cookies()
    return {cookie['name']: cookie['value'] for cookie in cookies}

def gerar_timestamp():
    """Gera timestamp no formato DD_MM_YYYY-HH:MM"""
    return datetime.now().strftime('%d_%m_%Y-%H:%M')

def formatar_data_brasileira(data_str: str) -> str:
    """
    Converte data para formato brasileiro garantido DD/MM/YYYY
    Aceita: DD/MM/YY, DD/MM/YYYY, ou varia√ß√µes
    """
    if not data_str or data_str.strip() == '':
        return ''
    
    data_str = data_str.strip()
    
    # Tentar parsing com diferentes formatos
    formatos = [
        '%d/%m/%Y',  # 05/08/2024
        '%d/%m/%y',  # 05/08/24
        '%d-%m-%Y',  # 05-08-2024
        '%d-%m-%y',  # 05-08-24
    ]
    
    for formato in formatos:
        try:
            data_obj = datetime.strptime(data_str, formato)
            # Retornar SEMPRE no formato DD/MM/YYYY
            return data_obj.strftime('%d/%m/%Y')
        except:
            continue
    
    # Se n√£o conseguiu parsear, retornar original
    return data_str

# ==================== LOGIN √öNICO ====================

def fazer_login_unico():
    """Realiza login √∫nico via Playwright e retorna sess√£o requests configurada"""
    print("\n" + "=" * 80)
    print("üîê REALIZANDO LOGIN √öNICO")
    print("=" * 80)
    
    with sync_playwright() as p:
        navegador = p.chromium.launch(headless=True)
        pagina = navegador.new_page()
        
        pagina.set_extra_http_headers({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        print("   Acessando p√°gina de login...")
        pagina.goto(URL_INICIAL, timeout=20000)
        
        pagina.fill('input[name="login"]', EMAIL)
        pagina.fill('input[name="password"]', SENHA)
        pagina.click('button[type="submit"]')
        
        try:
            pagina.wait_for_selector("nav", timeout=20000)
            print("   ‚úÖ Login realizado com sucesso!")
        except PlaywrightTimeoutError:
            print("   ‚ùå Falha no login. Verifique as credenciais.")
            navegador.close()
            return None, None
        
        cookies_dict = extrair_cookies_playwright(pagina)
        navegador.close()
    
    session = criar_sessao_robusta()
    session.cookies.update(cookies_dict)
    
    print("   ‚úÖ Sess√£o configurada e pronta para uso\n")
    return session, cookies_dict

# ==================== M√ìDULO 1: LOCALIDADES ====================

def verificar_hortolandia(texto: str) -> bool:
    """Verifica se o texto cont√©m refer√™ncia a Hortol√¢ndia DO SETOR CAMPINAS"""
    if not texto:
        return False
    
    texto_upper = texto.upper()
    variacoes_hortolandia = ["HORTOL", "HORTOLANDIA", "HORTOL√ÉNDIA", "HORTOL√ÇNDIA"]
    tem_hortolandia = any(var in texto_upper for var in variacoes_hortolandia)
    
    if not tem_hortolandia:
        return False
    
    tem_setor_campinas = "BR-SP-CAMPINAS" in texto_upper or "CAMPINAS-HORTOL" in texto_upper
    return tem_setor_campinas

def extrair_dados_localidade(texto_completo: str, igreja_id: int) -> Dict:
    """Extrai dados estruturados da localidade"""
    try:
        partes = texto_completo.split(' - ')
        
        if len(partes) >= 2:
            nome_localidade = partes[0].strip()
            caminho_completo = partes[1].strip()
            caminho_partes = caminho_completo.split('-')
            
            if len(caminho_partes) >= 4:
                pais = caminho_partes[0].strip()
                estado = caminho_partes[1].strip()
                regiao = caminho_partes[2].strip()
                cidade = caminho_partes[3].strip()
                setor = f"{pais}-{estado}-{regiao}"
                
                return {
                    'id_igreja': igreja_id,
                    'nome_localidade': nome_localidade,
                    'setor': setor,
                    'cidade': cidade,
                    'texto_completo': texto_completo
                }
            elif len(caminho_partes) >= 3:
                setor = '-'.join(caminho_partes[:-1])
                cidade = caminho_partes[-1].strip()
                
                return {
                    'id_igreja': igreja_id,
                    'nome_localidade': nome_localidade,
                    'setor': setor,
                    'cidade': cidade,
                    'texto_completo': texto_completo
                }
        
        return {
            'id_igreja': igreja_id,
            'nome_localidade': texto_completo,
            'setor': '',
            'cidade': 'HORTOLANDIA',
            'texto_completo': texto_completo
        }
        
    except Exception as e:
        print(f"‚ö† Erro ao extrair dados do ID {igreja_id}: {e}")
        return {
            'id_igreja': igreja_id,
            'nome_localidade': texto_completo,
            'setor': '',
            'cidade': 'HORTOLANDIA',
            'texto_completo': texto_completo
        }

def verificar_id_hortolandia(igreja_id: int, session: requests.Session) -> Optional[Dict]:
    """Verifica um √∫nico ID de localidade"""
    try:
        url = f"https://musical.congregacao.org.br/igrejas/filtra_igreja_setor?id_igreja={igreja_id}"
        headers = {
            'X-Requested-With': 'XMLHttpRequest',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
        
        resp = session.get(url, headers=headers, timeout=15)
        
        if resp.status_code == 200:
            resp.encoding = 'utf-8'
            json_data = resp.json()
            
            if isinstance(json_data, list) and len(json_data) > 0:
                texto_completo = json_data[0].get('text', '')
                
                if verificar_hortolandia(texto_completo):
                    return extrair_dados_localidade(texto_completo, igreja_id)
        
        return None
    except:
        return None

def executar_localidades(session):
    """Executa coleta de localidades e RETORNA OS IDs DAS IGREJAS"""
    tempo_inicio = time.time()
    timestamp_execucao = datetime.now()
    
    print("\n" + "=" * 80)
    print("üìç M√ìDULO 1: LOCALIDADES DE HORTOL√ÇNDIA")
    print("=" * 80)
    print(f"üìä Range: {LOCALIDADES_RANGE_INICIO:,} at√© {LOCALIDADES_RANGE_FIM:,}")
    print(f"üßµ Threads: {LOCALIDADES_NUM_THREADS}")
    
    localidades = []
    total_ids = LOCALIDADES_RANGE_FIM - LOCALIDADES_RANGE_INICIO + 1
    
    print(f"\nüöÄ Processando {total_ids:,} IDs...")
    
    with ThreadPoolExecutor(max_workers=LOCALIDADES_NUM_THREADS) as executor:
        futures = {
            executor.submit(verificar_id_hortolandia, id_igreja, session): id_igreja 
            for id_igreja in range(LOCALIDADES_RANGE_INICIO, LOCALIDADES_RANGE_FIM + 1)
        }
        
        processados = 0
        for future in as_completed(futures):
            processados += 1
            resultado = future.result()
            
            if resultado:
                localidades.append(resultado)
                print(f"‚úì [{processados}/{total_ids}] ID {resultado['id_igreja']}: {resultado['nome_localidade'][:50]}")
            
            if processados % 1000 == 0:
                print(f"   Progresso: {processados:,}/{total_ids:,} | {len(localidades)} localidades encontradas")
    
    tempo_total = time.time() - tempo_inicio
    
    print(f"\n‚úÖ Coleta finalizada: {len(localidades)} localidades encontradas")
    print(f"‚è±Ô∏è Tempo: {tempo_total/60:.2f} minutos")
    
    # Backup local
    timestamp_backup = timestamp_execucao.strftime('%d_%m_%Y-%H_%M')
    backup_file = f'backup_localidades_{timestamp_backup}.json'
    
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump({'localidades': localidades, 'timestamp': timestamp_backup}, f, ensure_ascii=False, indent=2)
    print(f"üíæ Backup salvo: {backup_file}")
    
    # Enviar para Google Sheets
    print("\nüì§ Enviando para Google Sheets...")
    
    dados_formatados = [
        [loc['id_igreja'], loc['nome_localidade'], loc['setor'], loc['cidade'], loc['texto_completo']]
        for loc in localidades
    ]
    
    payload = {
        "tipo": "nova_planilha_localidades",
        "nome_planilha": timestamp_execucao.strftime("Localidades_%d_%m_%y-%H:%M"),
        "headers": ["ID_Igreja", "Nome_Localidade", "Setor", "Cidade", "Texto_Completo"],
        "dados": dados_formatados,
        "metadata": {
            "total_localidades": len(localidades),
            "range_inicio": LOCALIDADES_RANGE_INICIO,
            "range_fim": LOCALIDADES_RANGE_FIM,
            "tempo_execucao_min": round(tempo_total/60, 2),
            "timestamp": timestamp_backup
        }
    }
    
    try:
        resp = requests.post(URL_APPS_SCRIPT_LOCALIDADES, json=payload, timeout=60)
        if resp.status_code == 200:
            resposta = resp.json()
            if resposta.get('status') == 'sucesso':
                print(f"‚úÖ Planilha criada: {resposta.get('planilha', {}).get('url', 'N/A')}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao enviar: {e}")
    
    ids_igrejas = [loc['id_igreja'] for loc in localidades]
    print(f"\nüì¶ Retornando {len(ids_igrejas)} IDs de igrejas para o pr√≥ximo m√≥dulo")
    return ids_igrejas

# ==================== M√ìDULO 2: BUSCAR ALUNOS ====================

def buscar_alunos_hortolandia() -> List[Dict]:
    """Busca lista de alunos do Google Sheets"""
    print("\n" + "=" * 80)
    print("üéì M√ìDULO 2: BUSCAR ALUNOS DE HORTOL√ÇNDIA")
    print("=" * 80)
    print("üîç Buscando lista de alunos do Google Sheets...")
    
    try:
        response = requests.get(
            URL_APPS_SCRIPT_HISTORICO, 
            params={"acao": "listar_ids_alunos"}, 
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('sucesso'):
                alunos = data.get('alunos', [])
                print(f"‚úÖ {len(alunos)} alunos encontrados no Google Sheets")
                print(f"üìä Amostra: {alunos[:3] if len(alunos) >= 3 else alunos}")
                return alunos
        
        print("‚ùå Erro ao buscar alunos")
        return []
    
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return []

# ==================== M√ìDULO 3: HIST√ìRICO INDIVIDUAL ====================

def validar_resposta_rigorosa(text: str, id_aluno: int) -> tuple:
    """Valida√ß√£o rigorosa da resposta - Retorna: (valido, tem_dados)"""
    if len(text) < 1000:
        return False, False
    
    if 'name="login"' in text or 'name="password"' in text:
        return False, False
    
    if 'class="nav-tabs"' not in text and 'id="mts"' not in text:
        return False, False
    
    tem_tabela = 'table' in text and 'tbody' in text
    tem_dados = '<tr>' in text and '<td>' in text
    
    return True, tem_dados

def extrair_dados_completo(html: str, id_aluno: int, nome_aluno: str) -> Dict:
    """Extra√ß√£o completa e robusta de todos os dados COM FORMATA√á√ÉO DE DATAS"""
    dados = {
        'mts_individual': [], 'mts_grupo': [],
        'msa_individual': [], 'msa_grupo': [],
        'provas': [],
        'hinario_individual': [], 'hinario_grupo': [],
        'metodos': [],
        'escalas_individual': [], 'escalas_grupo': []
    }
    
    try:
        soup = BeautifulSoup(html, 'html.parser')
        
        # MTS Individual
        aba_mts = soup.find('div', {'id': 'mts'})
        if aba_mts:
            tabelas = aba_mts.find_all('table', class_='table')
            if len(tabelas) > 0:
                tbody = tabelas[0].find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 7:
                            campos = [c.get_text(strip=True) for c in cols[:7]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 6)
                            campos[6] = formatar_data_brasileira(campos[6])
                            dados['mts_individual'].append([id_aluno, nome_aluno] + campos)
            
            # MTS Grupo
            if len(tabelas) > 1:
                tbody_g = tabelas[1].find('tbody')
                if tbody_g:
                    for linha in tbody_g.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 3:
                            campos = [c.get_text(strip=True) for c in cols[:3]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 2)
                            campos[2] = formatar_data_brasileira(campos[2])
                            dados['mts_grupo'].append([id_aluno, nome_aluno] + campos)
        
        # MSA Individual
        aba_msa = soup.find('div', {'id': 'msa'})
        if aba_msa:
            tabelas = aba_msa.find_all('table', class_='table')
            if len(tabelas) > 0:
                tbody = tabelas[0].find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 7:
                            campos = [c.get_text(strip=True) for c in cols[:7]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 6)
                            campos[6] = formatar_data_brasileira(campos[6])
                            dados['msa_individual'].append([id_aluno, nome_aluno] + campos)
            
            # MSA Grupo
            if len(tabelas) > 1:
                tbody_g = tabelas[1].find('tbody')
                if tbody_g:
                    for linha in tbody_g.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 3:
                            paginas_html = cols[0].decode_contents()
                            
                            fases_de = ""
                            fases_ate = ""
                            pag_de = ""
                            pag_ate = ""
                            claves = ""
                            
                            fases_m = re.search(r'<b>Fase\(s\):</b>\s*de\s+([\d.]+)\s+at√©\s+([\d.]+)', paginas_html)
                            if fases_m:
                                fases_de = fases_m.group(1)
                                fases_ate = fases_m.group(2)
                            
                            pag_m = re.search(r'<b>P√°gina\(s\):</b>\s*de\s+(\d+)\s+at√©\s+(\d+)', paginas_html)
                            if pag_m:
                                pag_de = pag_m.group(1)
                                pag_ate = pag_m.group(2)
                            
                            clave_m = re.search(r'<b>Clave\(s\):</b>\s*([^<\n]+)', paginas_html)
                            if clave_m:
                                claves = clave_m.group(1).strip()
                            
                            observacoes = cols[1].get_text(strip=True) if len(cols) > 1 else ""
                            data_licao = cols[2].get_text(strip=True) if len(cols) > 2 else ""
                            
                            # ‚úÖ FORMATAR DATA
                            data_licao = formatar_data_brasileira(data_licao)
                            
                            dados['msa_grupo'].append([
                                id_aluno, nome_aluno,
                                fases_de, fases_ate,
                                pag_de, pag_ate,
                                claves, observacoes, data_licao
                            ])
        
        # PROVAS
        aba_provas = soup.find('div', {'id': 'provas'})
        if aba_provas:
            tabela = aba_provas.find('table', class_='table')
            if tabela:
                tbody = tabela.find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 5:
                            campos = [c.get_text(strip=True) for c in cols[:5]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 4)
                            campos[4] = formatar_data_brasileira(campos[4])
                            dados['provas'].append([id_aluno, nome_aluno] + campos)
        
        # HIN√ÅRIO Individual
        aba_hin = soup.find('div', {'id': 'hinario'})
        if aba_hin:
            tabelas = aba_hin.find_all('table', class_='table')
            if len(tabelas) > 0:
                tbody = tabelas[0].find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 7:
                            campos = [c.get_text(strip=True) for c in cols[:7]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 6)
                            campos[6] = formatar_data_brasileira(campos[6])
                            dados['hinario_individual'].append([id_aluno, nome_aluno] + campos)
            
            # HIN√ÅRIO Grupo
            if len(tabelas) > 1:
                tbody_g = tabelas[1].find('tbody')
                if tbody_g:
                    for linha in tbody_g.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 3:
                            campos = [c.get_text(strip=True) for c in cols[:3]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 2)
                            campos[2] = formatar_data_brasileira(campos[2])
                            dados['hinario_grupo'].append([id_aluno, nome_aluno] + campos)
        
        # M√âTODOS
        aba_met = soup.find('div', {'id': 'metodos'})
        if aba_met:
            tabela = aba_met.find('table', class_='table')
            if tabela:
                tbody = tabela.find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 7:
                            campos = [c.get_text(strip=True) for c in cols[:7]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 6)
                            campos[6] = formatar_data_brasileira(campos[6])
                            dados['metodos'].append([id_aluno, nome_aluno] + campos)
        
        # ESCALAS Individual
        aba_esc = soup.find('div', {'id': 'escalas'})
        if aba_esc:
            tabelas = aba_esc.find_all('table', class_='table')
            if len(tabelas) > 0:
                tbody = tabelas[0].find('tbody')
                if tbody:
                    for linha in tbody.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 6:
                            campos = [c.get_text(strip=True) for c in cols[:6]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 5)
                            campos[5] = formatar_data_brasileira(campos[5])
                            dados['escalas_individual'].append([id_aluno, nome_aluno] + campos)
            
            # ESCALAS Grupo
            if len(tabelas) > 1:
                tbody_g = tabelas[1].find('tbody')
                if tbody_g:
                    for linha in tbody_g.find_all('tr'):
                        cols = linha.find_all('td')
                        if len(cols) >= 3:
                            campos = [c.get_text(strip=True) for c in cols[:3]]
                            # ‚úÖ FORMATAR DATA (√≠ndice 2)
                            campos[2] = formatar_data_brasileira(campos[2])
                            dados['escalas_grupo'].append([id_aluno, nome_aluno] + campos)
    
    except Exception as e:
        safe_print(f"‚ö†Ô∏è Erro ao extrair dados do aluno {id_aluno}: {e}")
    
    return dados

async def coletar_aluno_async(session: aiohttp.ClientSession, aluno: Dict, semaphore: asyncio.Semaphore) -> tuple:
    """Coleta ass√≠ncrona com valida√ß√£o rigorosa"""
    id_aluno = aluno['id_aluno']
    nome_aluno = aluno['nome']
    
    url = f"https://musical.congregacao.org.br/licoes/index/{id_aluno}"
    
    async with semaphore:
        for tentativa in range(HISTORICO_ASYNC_MAX_RETRIES):
            try:
                timeout = aiohttp.ClientTimeout(total=HISTORICO_ASYNC_TIMEOUT)
                async with session.get(url, timeout=timeout) as response:
                    if response.status != 200:
                        if tentativa < HISTORICO_ASYNC_MAX_RETRIES - 1:
                            await asyncio.sleep(0.2 * (tentativa + 1))
                            continue
                        return None, aluno
                    
                    html = await response.text()
                    valido, tem_dados = validar_resposta_rigorosa(html, id_aluno)
                    
                    if not valido:
                        if tentativa < HISTORICO_ASYNC_MAX_RETRIES - 1:
                            await asyncio.sleep(0.2 * (tentativa + 1))
                            continue
                        return None, aluno
                    
                    dados = extrair_dados_completo(html, id_aluno, nome_aluno)
                    total = sum(len(v) for v in dados.values())
                    
                    with stats_lock:
                        if total > 0:
                            historico_stats['com_dados'] += 1
                        else:
                            historico_stats['sem_dados'] += 1
                        historico_stats['fase1_sucesso'] += 1
                        historico_stats['alunos_processados'].add(id_aluno)
                    
                    return dados, None
                    
            except asyncio.TimeoutError:
                if tentativa < HISTORICO_ASYNC_MAX_RETRIES - 1:
                    await asyncio.sleep(0.2 * (tentativa + 1))
                    continue
            except Exception:
                if tentativa < HISTORICO_ASYNC_MAX_RETRIES - 1:
                    await asyncio.sleep(0.2 * (tentativa + 1))
                    continue
        
        with stats_lock:
            historico_stats['fase1_falha'] += 1
        return None, aluno

async def processar_chunk_async(alunos_chunk: List[Dict], cookies_dict: Dict) -> tuple:
    """Processa chunk com coleta ass√≠ncrona"""
    connector = aiohttp.TCPConnector(
        limit=HISTORICO_ASYNC_CONNECTIONS,
        limit_per_host=HISTORICO_ASYNC_CONNECTIONS,
        ttl_dns_cache=300
    )
    timeout = aiohttp.ClientTimeout(total=HISTORICO_ASYNC_TIMEOUT)
    
    cookie_str = "; ".join([f"{k}={v}" for k, v in cookies_dict.items()])
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Cookie': cookie_str,
        'Connection': 'keep-alive'
    }
    
    todos_dados = {
        'mts_individual': [], 'mts_grupo': [],
        'msa_individual': [], 'msa_grupo': [],
        'provas': [],
        'hinario_individual': [], 'hinario_grupo': [],
        'metodos': [],
        'escalas_individual': [], 'escalas_grupo': []
    }
    
    falhas = []
    semaphore = asyncio.Semaphore(HISTORICO_ASYNC_CONNECTIONS)
    
    async with aiohttp.ClientSession(connector=connector, timeout=timeout, headers=headers) as session:
        tasks = [coletar_aluno_async(session, aluno, semaphore) for aluno in alunos_chunk]
        resultados = await asyncio.gather(*tasks, return_exceptions=True)
        
        for resultado in resultados:
            if isinstance(resultado, Exception):
                continue
            
            dados, aluno_falha = resultado
            if dados:
                for key in todos_dados.keys():
                    todos_dados[key].extend(dados[key])
            elif aluno_falha:
                falhas.append(aluno_falha)
    
    return todos_dados, falhas

def coletar_fallback_robusto(alunos: List[Dict], cookies_dict: Dict) -> tuple:
    """Fallback s√≠ncrono com m√∫ltiplas tentativas"""
    if not alunos:
        return {
            'mts_individual': [], 'mts_grupo': [],
            'msa_individual': [], 'msa_grupo': [],
            'provas': [],
            'hinario_individual': [], 'hinario_grupo': [],
            'metodos': [],
            'escalas_individual': [], 'escalas_grupo': []
        }, []
    
    safe_print(f"\nüéØ FASE 2: Fallback robusto para {len(alunos)} alunos...")
    
    session = requests.Session()
    session.cookies.update(cookies_dict)
    session.headers.update({
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    })
    
    todos_dados = {
        'mts_individual': [], 'mts_grupo': [],
        'msa_individual': [], 'msa_grupo': [],
        'provas': [],
        'hinario_individual': [], 'hinario_grupo': [],
        'metodos': [],
        'escalas_individual': [], 'escalas_grupo': []
    }
    
    falhas_persistentes = []
    processados = 0
    
    for aluno in alunos:
        id_aluno = aluno['id_aluno']
        nome_aluno = aluno['nome']
        
        url = f"https://musical.congregacao.org.br/licoes/index/{id_aluno}"
        sucesso = False
        
        for tentativa in range(HISTORICO_FALLBACK_RETRIES):
            try:
                resp = session.get(url, timeout=HISTORICO_FALLBACK_TIMEOUT)
                
                if resp.status_code == 200:
                    valido, tem_dados = validar_resposta_rigorosa(resp.text, id_aluno)
                    
                    if valido:
                        dados = extrair_dados_completo(resp.text, id_aluno, nome_aluno)
                        for key in todos_dados.keys():
                            todos_dados[key].extend(dados[key])
                        
                        total = sum(len(v) for v in dados.values())
                        with stats_lock:
                            if total > 0:
                                historico_stats['com_dados'] += 1
                            else:
                                historico_stats['sem_dados'] += 1
                            historico_stats['fase2_sucesso'] += 1
                            historico_stats['alunos_processados'].add(id_aluno)
                        
                        sucesso = True
                        break
                
                if tentativa < HISTORICO_FALLBACK_RETRIES - 1:
                    time.sleep(0.5 * (tentativa + 1))
            
            except Exception:
                if tentativa < HISTORICO_FALLBACK_RETRIES - 1:
                    time.sleep(0.5 * (tentativa + 1))
                    continue
        
        if not sucesso:
            with stats_lock:
                historico_stats['fase2_falha'] += 1
            falhas_persistentes.append(aluno)
        
        processados += 1
        if processados % 10 == 0:
            safe_print(f"   Fallback: {processados}/{len(alunos)} processados")
    
    session.close()
    return todos_dados, falhas_persistentes

def coletar_cirurgico(alunos: List[Dict], cookies_dict: Dict) -> tuple:
    """Coleta cir√∫rgica individual com m√°ximo esfor√ßo"""
    if not alunos:
        return {
            'mts_individual': [], 'mts_grupo': [],
            'msa_individual': [], 'msa_grupo': [],
            'provas': [],
            'hinario_individual': [], 'hinario_grupo': [],
            'metodos': [],
            'escalas_individual': [], 'escalas_grupo': []
        }, []
    
    safe_print(f"\nüî¨ FASE 3: Coleta cir√∫rgica para {len(alunos)} alunos...")
    
    todos_dados = {
        'mts_individual': [], 'mts_grupo': [],
        'msa_individual': [], 'msa_grupo': [],
        'provas': [],
        'hinario_individual': [], 'hinario_grupo': [],
        'metodos': [],
        'escalas_individual': [], 'escalas_grupo': []
    }
    
    falhas_finais = []
    
    for idx, aluno in enumerate(alunos, 1):
        id_aluno = aluno['id_aluno']
        nome_aluno = aluno['nome']
        
        safe_print(f"   [{idx}/{len(alunos)}] Tentando ID {id_aluno} - {nome_aluno[:30]}...")
        
        url = f"https://musical.congregacao.org.br/licoes/index/{id_aluno}"
        sucesso = False
        
        for tentativa in range(HISTORICO_CIRURGICO_RETRIES):
            try:
                session = requests.Session()
                session.cookies.update(cookies_dict)
                session.headers.update({
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                })
                
                resp = session.get(url, timeout=HISTORICO_CIRURGICO_TIMEOUT)
                
                if resp.status_code == 200:
                    valido, tem_dados = validar_resposta_rigorosa(resp.text, id_aluno)
                    
                    if valido:
                        dados = extrair_dados_completo(resp.text, id_aluno, nome_aluno)
                        for key in todos_dados.keys():
                            todos_dados[key].extend(dados[key])
                        
                        total = sum(len(v) for v in dados.values())
                        with stats_lock:
                            if total > 0:
                                historico_stats['com_dados'] += 1
                            else:
                                historico_stats['sem_dados'] += 1
                            historico_stats['fase3_sucesso'] += 1
                            historico_stats['alunos_processados'].add(id_aluno)
                        
                        safe_print(f"      ‚úÖ Sucesso na tentativa {tentativa + 1}")
                        sucesso = True
                        break
                
                session.close()
                
                if tentativa < HISTORICO_CIRURGICO_RETRIES - 1:
                    time.sleep(HISTORICO_CIRURGICO_DELAY)
            
            except Exception:
                if tentativa < HISTORICO_CIRURGICO_RETRIES - 1:
                    time.sleep(HISTORICO_CIRURGICO_DELAY)
                continue
        
        if not sucesso:
            with stats_lock:
                historico_stats['fase3_falha'] += 1
            falhas_finais.append(aluno)
            safe_print(f"      ‚ùå Falha ap√≥s {HISTORICO_CIRURGICO_RETRIES} tentativas")
        
        if idx < len(alunos):
            time.sleep(0.5)
    
    return todos_dados, falhas_finais

def mesclar_dados(dados1: Dict, dados2: Dict) -> Dict:
    """Mescla dois dicion√°rios de dados"""
    resultado = {}
    for key in dados1.keys():
        resultado[key] = dados1[key] + dados2[key]
    return resultado

def gerar_resumo_alunos(alunos: List[Dict], todos_dados: Dict) -> List[List]:
    """Gera resumo com 14 colunas"""
    resumo = []
    
    for aluno in alunos:
        id_aluno = aluno['id_aluno']
        nome = aluno['nome']
        id_igreja = aluno['id_igreja']
        
        t_mts_i = sum(1 for x in todos_dados['mts_individual'] if x[0] == id_aluno)
        t_mts_g = sum(1 for x in todos_dados['mts_grupo'] if x[0] == id_aluno)
        t_msa_i = sum(1 for x in todos_dados['msa_individual'] if x[0] == id_aluno)
        t_msa_g = sum(1 for x in todos_dados['msa_grupo'] if x[0] == id_aluno)
        t_prov = sum(1 for x in todos_dados['provas'] if x[0] == id_aluno)
        t_hin_i = sum(1 for x in todos_dados['hinario_individual'] if x[0] == id_aluno)
        t_hin_g = sum(1 for x in todos_dados['hinario_grupo'] if x[0] == id_aluno)
        t_met = sum(1 for x in todos_dados['metodos'] if x[0] == id_aluno)
        t_esc_i = sum(1 for x in todos_dados['escalas_individual'] if x[0] == id_aluno)
        t_esc_g = sum(1 for x in todos_dados['escalas_grupo'] if x[0] == id_aluno)
        
        provas_aluno = [x for x in todos_dados['provas'] if x[0] == id_aluno]
        if provas_aluno:
            try:
                notas = []
                for prova in provas_aluno:
                    if len(prova) > 3:
                        nota_str = str(prova[3]).replace(',', '.')
                        try:
                            nota = float(nota_str)
                            notas.append(nota)
                        except:
                            pass
                media = sum(notas) / len(notas) if notas else 0
            except:
                media = 0
        else:
            media = 0
        
        resumo.append([
            id_aluno, nome, id_igreja,
            t_mts_i, t_mts_g, t_msa_i, t_msa_g,
            t_prov, round(media, 2),
            t_hin_i, t_hin_g, t_met,
            t_esc_i, t_esc_g
        ])
    
    return resumo

def filtrar_dados_vazios(dados: Dict) -> Dict:
    """Filtra arrays vazios"""
    dados_filtrados = {}
    
    for categoria, valores in dados.items():
        if valores and len(valores) > 0:
            valores_validos = [v for v in valores if v and len(v) > 0]
            dados_filtrados[categoria] = valores_validos
        else:
            dados_filtrados[categoria] = []
    
    return dados_filtrados

def enviar_lotes_google_sheets(todos_dados: Dict, alunos_modulo2: List[Dict], tempo_total: float):
    """Envia dados em lotes para evitar timeout do Google Apps Script"""
    print("\n" + "=" * 80)
    print("üì§ ENVIANDO DADOS EM LOTES PARA GOOGLE SHEETS")
    print("=" * 80)
    
    # Gerar resumo completo
    resumo_completo = gerar_resumo_alunos(alunos_modulo2, todos_dados)
    
    # Calcular n√∫mero de lotes baseado no resumo
    total_alunos = len(resumo_completo)
    num_lotes = (total_alunos + LOTE_TAMANHO - 1) // LOTE_TAMANHO
    
    print(f"üìä Total de alunos: {total_alunos}")
    print(f"üì¶ Tamanho do lote: {LOTE_TAMANHO} alunos")
    print(f"üî¢ N√∫mero de lotes: {num_lotes}")
    
    # Metadata geral
    metadata_base = {
        'total_alunos_processados': len(alunos_modulo2),
        'alunos_com_dados': historico_stats['com_dados'],
        'alunos_sem_dados': historico_stats['sem_dados'],
        'tempo_coleta_segundos': tempo_total,
        'data_coleta': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    planilha_url = None
    
    # Processar cada lote
    for lote_num in range(1, num_lotes + 1):
        inicio = (lote_num - 1) * LOTE_TAMANHO
        fim = min(lote_num * LOTE_TAMANHO, total_alunos)
        
        print(f"\nüì¶ Processando lote {lote_num}/{num_lotes} (alunos {inicio+1} a {fim})...")
        
        # IDs dos alunos neste lote
        ids_lote = set(resumo_completo[i][0] for i in range(inicio, fim))
        
        # Filtrar dados do lote
        lote_dados = {
            'mts_individual': [x for x in todos_dados['mts_individual'] if x[0] in ids_lote],
            'mts_grupo': [x for x in todos_dados['mts_grupo'] if x[0] in ids_lote],
            'msa_individual': [x for x in todos_dados['msa_individual'] if x[0] in ids_lote],
            'msa_grupo': [x for x in todos_dados['msa_grupo'] if x[0] in ids_lote],
            'provas': [x for x in todos_dados['provas'] if x[0] in ids_lote],
            'hinario_individual': [x for x in todos_dados['hinario_individual'] if x[0] in ids_lote],
            'hinario_grupo': [x for x in todos_dados['hinario_grupo'] if x[0] in ids_lote],
            'metodos': [x for x in todos_dados['metodos'] if x[0] in ids_lote],
            'escalas_individual': [x for x in todos_dados['escalas_individual'] if x[0] in ids_lote],
            'escalas_grupo': [x for x in todos_dados['escalas_grupo'] if x[0] in ids_lote],
            'resumo': resumo_completo[inicio:fim]
        }
        
        # Metadata do lote
        metadata_lote = metadata_base.copy()
        metadata_lote['alunos_inicio'] = inicio
        metadata_lote['alunos_fim'] = fim
        
        # Payload do lote
        payload = {
            'tipo': 'licoes_alunos_lote',
            'lote_numero': lote_num,
            'total_lotes': num_lotes,
            **lote_dados,
            'metadata': metadata_lote
        }
        
        # Enviar lote
        try:
            print(f"   üì° Enviando {fim - inicio} alunos...")
            response = requests.post(
                URL_APPS_SCRIPT_HISTORICO, 
                json=payload, 
                timeout=LOTE_TIMEOUT
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('sucesso'):
                    print(f"   ‚úÖ Lote {lote_num} processado com sucesso")
                    
                    # Capturar URL da planilha no √∫ltimo lote
                    if lote_num == num_lotes and 'planilha' in result:
                        planilha_url = result['planilha'].get('url')
                else:
                    print(f"   ‚ö†Ô∏è Erro no lote {lote_num}: {result.get('erro', 'Desconhecido')}")
            else:
                print(f"   ‚ö†Ô∏è HTTP {response.status_code} no lote {lote_num}")
        
        except Exception as e:
            print(f"   ‚ùå Erro ao enviar lote {lote_num}: {e}")
        
        # Aguardar entre lotes (exceto no √∫ltimo)
        if lote_num < num_lotes:
            time.sleep(2)
    
    print("\n" + "=" * 80)
    if planilha_url:
        print(f"‚úÖ ENVIO COMPLETO!")
        print(f"üìä Planilha criada: {planilha_url}")
    else:
        print("‚ö†Ô∏è Envio finalizado, mas URL da planilha n√£o dispon√≠vel")
    print("=" * 80)

def executar_historico(cookies_dict, alunos_modulo2):
    """Executa coleta de hist√≥rico individual com sistema de 3 fases"""
    tempo_inicio = time.time()
    historico_stats['tempo_inicio'] = tempo_inicio
    
    print("\n" + "=" * 80)
    print("üìö M√ìDULO 3: HIST√ìRICO INDIVIDUAL")
    print("=" * 80)
    
    if not alunos_modulo2:
        print("‚ùå Nenhum aluno recebido do M√≥dulo 2. Abortando.")
        return
    
    print(f"üéì Total de alunos a processar: {len(alunos_modulo2)}")
    print(f"‚ö° Conex√µes simult√¢neas: {HISTORICO_ASYNC_CONNECTIONS}")
    print(f"üì¶ Tamanho do chunk: {HISTORICO_CHUNK_SIZE}")
    
    todos_dados = {
        'mts_individual': [], 'mts_grupo': [],
        'msa_individual': [], 'msa_grupo': [],
        'provas': [],
        'hinario_individual': [], 'hinario_grupo': [],
        'metodos': [],
        'escalas_individual': [], 'escalas_grupo': []
    }
    
    # ========== FASE 1: COLETA ASS√çNCRONA ==========
    print(f"\n‚ö° FASE 1: Coleta ass√≠ncrona em alta velocidade...")
    
    falhas_fase1 = []
    total_chunks = (len(alunos_modulo2) + HISTORICO_CHUNK_SIZE - 1) // HISTORICO_CHUNK_SIZE
    
    for i in range(0, len(alunos_modulo2), HISTORICO_CHUNK_SIZE):
        chunk = alunos_modulo2[i:i+HISTORICO_CHUNK_SIZE]
        chunk_num = i // HISTORICO_CHUNK_SIZE + 1
        
        safe_print(f"üì¶ Chunk {chunk_num}/{total_chunks} ({len(chunk)} alunos)...")
        
        dados_chunk, falhas_chunk = asyncio.run(processar_chunk_async(chunk, cookies_dict))
        todos_dados = mesclar_dados(todos_dados, dados_chunk)
        falhas_fase1.extend(falhas_chunk)
        
        if i + HISTORICO_CHUNK_SIZE < len(alunos_modulo2):
            time.sleep(0.5)
    
    print(f"\n‚úÖ FASE 1 CONCLU√çDA")
    print(f"   Sucesso: {historico_stats['fase1_sucesso']} | Falhas: {len(falhas_fase1)}")
    
    # ========== FASE 2: FALLBACK ROBUSTO ==========
    if falhas_fase1:
        dados_fase2, falhas_fase2 = coletar_fallback_robusto(falhas_fase1, cookies_dict)
        todos_dados = mesclar_dados(todos_dados, dados_fase2)
        
        print(f"‚úÖ FASE 2 CONCLU√çDA")
        print(f"   Recuperados: {historico_stats['fase2_sucesso']} | Falhas: {len(falhas_fase2)}")
    else:
        falhas_fase2 = []
        print("\nüéâ FASE 2 n√£o necess√°ria - todos processados na Fase 1!")
    
    # ========== FASE 3: COLETA CIR√öRGICA ==========
    if falhas_fase2:
        dados_fase3, falhas_finais = coletar_cirurgico(falhas_fase2, cookies_dict)
        todos_dados = mesclar_dados(todos_dados, dados_fase3)
        
        print(f"‚úÖ FASE 3 CONCLU√çDA")
        print(f"   Recuperados: {historico_stats['fase3_sucesso']} | Falhas: {len(falhas_finais)}")
        
        if falhas_finais:
            print("\n‚ö†Ô∏è ALUNOS N√ÉO COLETADOS:")
            for aluno in falhas_finais:
                print(f"   - ID {aluno['id_aluno']}: {aluno['nome']}")
    else:
        print("\nüéâ FASE 3 n√£o necess√°ria!")
    
    tempo_total = time.time() - tempo_inicio
    
    print(f"\n‚úÖ Coleta finalizada!")
    print(f"   Alunos processados: {len(historico_stats['alunos_processados'])}")
    print(f"   Com dados: {historico_stats['com_dados']}")
    print(f"   Sem dados: {historico_stats['sem_dados']}")
    print(f"‚è±Ô∏è Tempo: {tempo_total/60:.2f} minutos")
    
    # Filtrar dados vazios
    todos_dados = filtrar_dados_vazios(todos_dados)
    
    # Backup local
    timestamp = gerar_timestamp()
    backup_file = f'backup_historico_{timestamp.replace(":", "-")}.json'
    resumo_alunos = gerar_resumo_alunos(alunos_modulo2, todos_dados)
    
    with open(backup_file, 'w', encoding='utf-8') as f:
        json.dump({
            'dados': todos_dados,
            'resumo': resumo_alunos,
            'timestamp': timestamp
        }, f, ensure_ascii=False, indent=2)
    print(f"üíæ Backup salvo: {backup_file}")
    
    # Enviar em lotes
    enviar_lotes_google_sheets(todos_dados, alunos_modulo2, tempo_total)

# ==================== MAIN - ORQUESTRADOR ====================

def main():
    tempo_inicio_total = time.time()
    
    print("\n" + "=" * 80)
    print("üéº SISTEMA MUSICAL - COLETOR COM DATAS CORRIGIDAS")
    print("=" * 80)
    print("üìã Ordem de execu√ß√£o:")
    print("   1Ô∏è‚É£ Localidades de Hortol√¢ndia (varredura de IDs)")
    print("   2Ô∏è‚É£ Buscar Alunos (do Google Sheets)")
    print("   3Ô∏è‚É£ Hist√≥rico Individual (3 fases + formata√ß√£o de datas)")
    print("=" * 80)
    
    # PASSO 1: Login √∫nico
    session, cookies = fazer_login_unico()
    
    if not session:
        print("\n‚ùå Falha no login. Encerrando processo.")
        return
    
    # PASSO 2: Executar Localidades (opcional)
    # ids_igrejas = executar_localidades(session)
    
    # PASSO 3: Buscar alunos do Google Sheets
    alunos = buscar_alunos_hortolandia()
    
    if not alunos:
        print("\n‚ö†Ô∏è M√≥dulo 2 falhou. Interrompendo processo.")
        return
    
    # PASSO 4: Executar Hist√≥rico com datas formatadas
    executar_historico(cookies, alunos)
    
    # RESUMO FINAL
    tempo_total = time.time() - tempo_inicio_total
    
    print("\n" + "=" * 80)
    print("üéâ PROCESSO COMPLETO FINALIZADO!")
    print("=" * 80)
    print(f"‚è±Ô∏è Tempo total: {tempo_total/60:.2f} minutos")
    print(f"üìä M√≥dulos executados:")
    print(f"   ‚úÖ M√≥dulo 2: {len(alunos)} alunos carregados")
    print(f"   ‚úÖ M√≥dulo 3: {len(historico_stats['alunos_processados'])} hist√≥ricos")
    print(f"üíæ Todos os backups salvos localmente")
    print(f"üìä Planilhas criadas no Google Sheets")
    print(f"‚úÖ Todas as datas no formato DD/MM/YYYY")
    print("=" * 80 + "\n")

if __name__ == "__main__":
    main()
