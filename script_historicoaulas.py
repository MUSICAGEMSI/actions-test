from dotenv import load_dotenv
load_dotenv(dotenv_path="credencial.env")

from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError
import os
import re
import requests
import time
import json
from bs4 import BeautifulSoup
from datetime import datetime
import multiprocessing as mp
from multiprocessing import Queue, Process, Manager
import queue
import pickle
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

EMAIL = os.environ.get("LOGIN_MUSICAL")
SENHA = os.environ.get("SENHA_MUSICAL")
URL_INICIAL = "https://musical.congregacao.org.br/"
URL_APPS_SCRIPT = 'https://script.google.com/macros/s/AKfycbxGBDSwoFQTJ8m-H1keAEMOm-iYAZpnQc5CVkcNNgilDDL3UL8ptdTP45TiaxHDw8Am/exec'

# Configura√ß√µes otimizadas - REDUZIDAS para evitar overload
MAX_PROCESSOS_SIMULTANEOS = 5  # Reduzido drasticamente
TIMEOUT_POR_PAGINA = 1800  # Aumentado
TIMEOUT_SELECTOR = 30000  # Aumentado
DELAY_ENTRE_INICIALIZACOES = 3  # Aumentado para dar tempo entre inicializa√ß√µes
DELAY_ENTRE_ACOES = 2  # Delay entre a√ß√µes na p√°gina

if not EMAIL or not SENHA:
    print("‚ùå Erro: LOGIN_MUSICAL ou SENHA_MUSICAL n√£o definidos.")
    exit(1)

class CookieManager:
    """Gerenciador centralizado de cookies para compartilhar sess√£o entre processos"""
    
    def __init__(self):
        self.cookies = None
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36'
        }
        self.session_data = {}
    
    def fazer_login_global(self):
        """Faz login uma √∫nica vez e extrai cookies + dados de sess√£o para reutiliza√ß√£o"""
        print("üîê Realizando login global √∫nico...")
        
        with sync_playwright() as p:
            navegador = p.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-web-security',  # Adicionado
                    '--disable-features=VizDisplayCompositor',
                    '--disable-ipc-flooding-protection'  # Adicionado
                ]
            )
            
            context = navegador.new_context(
                viewport={'width': 1920, 'height': 1080},
                extra_http_headers=self.headers
            )
            pagina = context.new_page()
            
            try:
                # Login com timeouts maiores
                print("üåê Acessando p√°gina inicial...")
                pagina.goto(URL_INICIAL, timeout=60000)
                
                print("üìù Preenchendo credenciais...")
                pagina.wait_for_selector('input[name="login"]', timeout=TIMEOUT_SELECTOR)
                pagina.fill('input[name="login"]', EMAIL)
                pagina.fill('input[name="password"]', SENHA)
                
                print("üîë Fazendo login...")
                pagina.click('button[type="submit"]')
                
                # Aguardar login com timeout maior
                print("‚è≥ Aguardando confirma√ß√£o do login...")
                pagina.wait_for_selector("nav", timeout=30000)
                
                # Extrair cookies e dados de sess√£o
                cookies_playwright = pagina.context.cookies()
                self.cookies = {cookie['name']: cookie['value'] for cookie in cookies_playwright}
                
                # Capturar dados adicionais da sess√£o
                try:
                    local_storage = pagina.evaluate("() => Object.assign({}, localStorage)")
                    session_storage = pagina.evaluate("() => Object.assign({}, sessionStorage)")
                    self.session_data = {
                        'localStorage': local_storage,
                        'sessionStorage': session_storage
                    }
                except:
                    print("‚ö†Ô∏è N√£o foi poss√≠vel capturar storage data")
                
                print("üîç Navegando para hist√≥rico para descobrir p√°ginas...")
                if self.navegar_para_historico(pagina):
                    total_paginas = self.descobrir_total_paginas(pagina)
                else:
                    print("‚ö†Ô∏è Falha ao navegar para hist√≥rico, usando valor padr√£o")
                    total_paginas = 30
                
                navegador.close()
                
                print(f"‚úÖ Login global realizado!")
                print(f"üç™ {len(self.cookies)} cookies extra√≠dos")
                print(f"üìä Total de p√°ginas descoberto: {total_paginas}")
                
                return total_paginas
                
            except Exception as e:
                navegador.close()
                raise Exception(f"Falha no login global: {e}")
    
    def navegar_para_historico(self, pagina):
        """Navega para o hist√≥rico de aulas com melhor tratamento de erros"""
        try:
            print("üîç Navegando para G.E.M...")
            
            # Aguardar p√°gina carregar completamente
            pagina.wait_for_load_state("networkidle", timeout=30000)
            pagina.wait_for_selector("nav", timeout=TIMEOUT_SELECTOR)
            
            # Tentar diferentes seletores para o menu G.E.M
            seletores_gem = [
                'a:has-text("G.E.M")',
                'a:has(.fa-graduation-cap)',
                'a[href="#"]:has(span:text-is("G.E.M"))',
                'a:has(span):has-text("G.E.M")',
                'li:has-text("G.E.M") a',
                '.nav-link:has-text("G.E.M")'
            ]
            
            menu_gem_clicado = False
            for i, seletor in enumerate(seletores_gem):
                try:
                    print(f"üîç Tentando seletor {i+1}: {seletor}")
                    pagina.wait_for_selector(seletor, timeout=10000)
                    pagina.click(seletor)
                    menu_gem_clicado = True
                    print("‚úÖ Menu G.E.M clicado com sucesso")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è Seletor {i+1} falhou: {e}")
                    continue
            
            if not menu_gem_clicado:
                print("‚ùå N√£o foi poss√≠vel encontrar o menu G.E.M")
                return False
            
            time.sleep(DELAY_ENTRE_ACOES)
            
            # Clicar em "Hist√≥rico de Aulas" com m√∫ltiplas tentativas
            historico_clicado = False
            seletores_historico = [
                'a:has-text("Hist√≥rico de Aulas")',
                'a[href*="aulas_abertas"]',
                'li:has-text("Hist√≥rico") a'
            ]
            
            for i, seletor in enumerate(seletores_historico):
                try:
                    print(f"üîç Tentando acessar hist√≥rico - m√©todo {i+1}")
                    pagina.wait_for_selector(seletor, state="visible", timeout=15000)
                    pagina.click(seletor)
                    historico_clicado = True
                    print("‚úÖ Link do hist√≥rico clicado")
                    break
                except Exception as e:
                    print(f"‚ö†Ô∏è M√©todo {i+1} falhou: {e}")
                    continue
            
            # Se nenhum m√©todo funcionou, tentar navega√ß√£o direta
            if not historico_clicado:
                try:
                    print("üîç Tentando navega√ß√£o direta para hist√≥rico...")
                    pagina.goto("https://musical.congregacao.org.br/aulas_abertas", timeout=30000)
                    historico_clicado = True
                    print("‚úÖ Navega√ß√£o direta bem-sucedida")
                except Exception as e:
                    print(f"‚ùå Navega√ß√£o direta falhou: {e}")
                    return False
            
            # Aguardar p√°gina do hist√≥rico carregar
            print("‚è≥ Aguardando p√°gina do hist√≥rico carregar...")
            try:
                # Aguardar elementos da tabela aparecerem
                pagina.wait_for_load_state("networkidle", timeout=30000)
                
                # Tentar diferentes seletores para confirmar que estamos na p√°gina certa
                elementos_confirmacao = [
                    'input[type="checkbox"][name="item[]"]',
                    "table tbody tr",
                    'select[name="listagem_length"]',
                    ".dataTables_wrapper"
                ]
                
                pagina_carregada = False
                for seletor in elementos_confirmacao:
                    try:
                        pagina.wait_for_selector(seletor, timeout=10000)
                        print(f"‚úÖ Elemento encontrado: {seletor}")
                        pagina_carregada = True
                        break
                    except:
                        print(f"‚ö†Ô∏è Elemento n√£o encontrado: {seletor}")
                        continue
                
                return pagina_carregada
                        
            except PlaywrightTimeoutError as e:
                print(f"‚ùå Timeout aguardando p√°gina do hist√≥rico: {e}")
                return False
                    
        except Exception as e:
            print(f"‚ùå Erro durante navega√ß√£o: {e}")
            return False
    
    def descobrir_total_paginas(self, pagina):
        """Descobre o total de p√°ginas com melhor tratamento de erros"""
        try:
            print("üîç Descobrindo total de p√°ginas...")
            
            # Aguardar p√°gina estabilizar
            time.sleep(3)
            
            # Configurar para mostrar 100 registros se poss√≠vel
            try:
                print("‚öôÔ∏è Configurando para mostrar 100 registros...")
                select_elem = pagina.query_selector('select[name="listagem_length"]')
                if select_elem:
                    pagina.select_option('select[name="listagem_length"]', "100")
                    time.sleep(5)  # Aguardar recarregamento da tabela
                    pagina.wait_for_load_state("networkidle", timeout=15000)
                    print("‚úÖ Configurado para 100 registros")
                else:
                    print("‚ö†Ô∏è Seletor de quantidade n√£o encontrado")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao configurar registros por p√°gina: {e}")
            
            # M√©todo 1: Extrair do elemento de informa√ß√£o da pagina√ß√£o
            try:
                info_selectors = [
                    'div.dataTables_info',
                    '.dataTables_info',
                    'div:has-text("Mostrando")',
                    'div:has-text("registros")'
                ]
                
                for seletor in info_selectors:
                    try:
                        info_elem = pagina.query_selector(seletor)
                        if info_elem:
                            texto_info = info_elem.inner_text()
                            print(f"üìä Info de pagina√ß√£o: {texto_info}")
                            
                            # Diferentes padr√µes de regex para extrair total
                            padroes = [
                                r'de\s+(\d+)\s+registros',
                                r'of\s+(\d+)\s+entries',
                                r'total\s+de\s+(\d+)',
                                r'(\d+)\s+total'
                            ]
                            
                            for padrao in padroes:
                                match = re.search(padrao, texto_info.lower())
                                if match:
                                    total_registros = int(match.group(1))
                                    registros_por_pagina = 100
                                    total_paginas = (total_registros + registros_por_pagina - 1) // registros_por_pagina
                                    print(f"‚úÖ Total de p√°ginas calculado: {total_paginas}")
                                    return min(total_paginas, 50)  # Limite m√°ximo de seguran√ßa
                            break
                    except:
                        continue
                        
            except Exception as e:
                print(f"‚ö†Ô∏è M√©todo 1 (info) falhou: {e}")
            
            # M√©todo 2: Contar links de pagina√ß√£o
            try:
                print("üîç Tentando m√©todo 2: links de pagina√ß√£o...")
                pagination_selectors = [
                    'div.dataTables_paginate a',
                    '.pagination a',
                    '.dataTables_paginate .paginate_button',
                    'ul.pagination li a'
                ]
                
                for seletor in pagination_selectors:
                    try:
                        links_paginacao = pagina.query_selector_all(seletor)
                        if links_paginacao:
                            numeros = []
                            for link in links_paginacao:
                                texto = link.inner_text().strip()
                                if texto.isdigit():
                                    numeros.append(int(texto))
                            
                            if numeros:
                                total_paginas = max(numeros)
                                print(f"‚úÖ Total de p√°ginas encontrado via pagina√ß√£o: {total_paginas}")
                                return min(total_paginas, 50)  # Limite m√°ximo de seguran√ßa
                    except:
                        continue
                        
            except Exception as e:
                print(f"‚ö†Ô∏è M√©todo 2 (pagina√ß√£o) falhou: {e}")
            
            # M√©todo 3: Contar linhas e estimar
            try:
                print("üîç Tentando m√©todo 3: estimativa por linhas...")
                linhas = pagina.query_selector_all("table tbody tr")
                if linhas and len(linhas) >= 90:  # Se tem quase 100 linhas, provavelmente tem mais p√°ginas
                    print("‚ö†Ô∏è P√°gina cheia, assumindo m√∫ltiplas p√°ginas")
                    return 30  # Valor conservador
                elif linhas:
                    print(f"üìä Encontradas {len(linhas)} linhas - assumindo p√°gina √∫nica ou poucas p√°ginas")
                    return max(5, len(linhas) // 20)  # Estimativa conservadora
                    
            except Exception as e:
                print(f"‚ö†Ô∏è M√©todo 3 (estimativa) falhou: {e}")
            
            # Fallback final
            print("‚ö†Ô∏è Todos os m√©todos falharam, assumindo 20 p√°ginas como padr√£o conservador")
            return 20
            
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico ao descobrir total de p√°ginas: {e}")
            return 20
    
    def get_cookies(self):
        """Retorna os cookies para uso em outros processos"""
        return self.cookies
    
    def get_headers(self):
        """Retorna os headers para uso em outros processos"""
        return self.headers
    
    def get_session_data(self):
        """Retorna dados de sess√£o adicionais"""
        return self.session_data

def extrair_detalhes_aula(session, aula_id):
    """Extrai detalhes da aula via requests para verificar ATA"""
    try:
        url_detalhes = f"https://musical.congregacao.org.br/aulas_abertas/visualizar_aula/{aula_id}"
        resp = session.get(url_detalhes, timeout=15)
        
        if resp.status_code == 200:
            return "OK" if "ATA DA AULA" in resp.text else "FANTASMA"
        return "ERRO"
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao extrair detalhes da aula {aula_id}: {e}")
        return "ERRO"

def processar_frequencia_modal(pagina, aula_id, professor_id):
    """Processa a frequ√™ncia ap√≥s abrir o modal com melhor tratamento de erros"""
    try:
        # Aguardar modal aparecer e carregar
        pagina.wait_for_selector("#modalFrequencia", state="visible", timeout=15000)
        pagina.wait_for_selector("table.table-bordered tbody tr", timeout=15000)
        
        presentes_ids = []
        presentes_nomes = []
        ausentes_ids = []
        ausentes_nomes = []
        
        # Aguardar conte√∫do da tabela carregar
        time.sleep(2)
        
        linhas = pagina.query_selector_all("table.table-bordered tbody tr")
        print(f"üìä Processando {len(linhas)} linhas de frequ√™ncia")
        
        for i, linha in enumerate(linhas):
            try:
                nome_cell = linha.query_selector("td:first-child")
                nome_completo = nome_cell.inner_text().strip() if nome_cell else ""
                
                if not nome_completo:
                    continue
                
                link_presenca = linha.query_selector("td:last-child a")
                
                if link_presenca:
                    id_membro = link_presenca.get_attribute("data-id-membro")
                    
                    if not id_membro:
                        continue
                    
                    icone = link_presenca.query_selector("i")
                    if icone:
                        classes = icone.get_attribute("class") or ""
                        
                        if "fa-check" in classes and "text-success" in classes:
                            presentes_ids.append(id_membro)
                            presentes_nomes.append(nome_completo)
                        elif "fa-remove" in classes and "text-danger" in classes:
                            ausentes_ids.append(id_membro)
                            ausentes_nomes.append(nome_completo)
                        
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao processar linha {i}: {e}")
                continue
        
        print(f"‚úÖ Frequ√™ncia processada: {len(presentes_ids)} presentes, {len(ausentes_ids)} ausentes")
        
        return {
            'presentes_ids': presentes_ids,
            'presentes_nomes': presentes_nomes,
            'ausentes_ids': ausentes_ids,
            'ausentes_nomes': ausentes_nomes,
            'tem_presenca': "OK" if presentes_ids else "FANTASMA"
        }
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao processar frequ√™ncia: {e}")
        return {
            'presentes_ids': [],
            'presentes_nomes': [],
            'ausentes_ids': [],
            'ausentes_nomes': [],
            'tem_presenca': "ERRO"
        }

def extrair_dados_de_linha_por_indice(pagina, indice_linha):
    """Extrai dados de uma linha espec√≠fica pelo √≠ndice com melhor tratamento"""
    try:
        # Aguardar tabela estar presente
        pagina.wait_for_selector("table tbody tr", timeout=10000)
        linhas = pagina.query_selector_all("table tbody tr")
        
        if indice_linha >= len(linhas):
            return None, False
        
        linha = linhas[indice_linha]
        colunas = linha.query_selector_all("td")
        
        if len(colunas) >= 6:
            data_aula = colunas[1].inner_text().strip()
            
            # Parar se encontrou 2024
            if "2024" in data_aula:
                return None, True
            
            congregacao = colunas[2].inner_text().strip()
            curso = colunas[3].inner_text().strip()
            turma = colunas[4].inner_text().strip()
            
            btn_freq = linha.query_selector("button[onclick*='visualizarFrequencias']")
            if btn_freq:
                onclick = btn_freq.get_attribute("onclick")
                match = re.search(r'visualizarFrequencias\((\d+),\s*(\d+)\)', onclick)
                if match:
                    aula_id = match.group(1)
                    professor_id = match.group(2)
                    
                    return {
                        'aula_id': aula_id,
                        'professor_id': professor_id,
                        'data': data_aula,
                        'congregacao': congregacao,
                        'curso': curso,
                        'turma': turma
                    }, False
        
        return None, False
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao extrair dados da linha {indice_linha}: {e}")
        return None, False

def clicar_botao_frequencia_por_indice(pagina, indice_linha):
    """Clica no bot√£o de frequ√™ncia com melhor tratamento de erros"""
    try:
        linhas = pagina.query_selector_all("table tbody tr")
        
        if indice_linha >= len(linhas):
            return False
        
        linha = linhas[indice_linha]
        btn_freq = linha.query_selector("button[onclick*='visualizarFrequencias']")
        
        if btn_freq:
            # Tentar scroll para o elemento se necess√°rio
            try:
                pagina.evaluate("element => element.scrollIntoView()", btn_freq)
            except:
                pass
            
            # Clicar no bot√£o
            btn_freq.click()
            return True
        
        return False
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao clicar no bot√£o da linha {indice_linha}: {e}")
        return False

def contar_linhas_na_pagina(pagina):
    """Conta quantas linhas existem na p√°gina atual"""
    try:
        pagina.wait_for_selector("table tbody", timeout=10000)
        linhas = pagina.query_selector_all("table tbody tr")
        return len(linhas)
    except:
        return 0

def processar_pagina_com_cookies_compartilhados(numero_pagina, cookies_compartilhados, headers_compartilhados, session_data, resultado_queue, erro_queue):
    """Processa uma p√°gina espec√≠fica usando cookies compartilhados - VERS√ÉO MELHORADA"""
    try:
        print(f"üöÄ [P√°gina {numero_pagina}] Iniciando processamento com cookies compartilhados")
        
        with sync_playwright() as p:
            navegador = p.chromium.launch(
                headless=True,
                args=[
                    '--no-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-blink-features=AutomationControlled',
                    '--disable-features=VizDisplayCompositor',
                    '--disable-web-security',
                    '--disable-ipc-flooding-protection'
                ]
            )
            
            context = navegador.new_context(
                viewport={'width': 1920, 'height': 1080},
                extra_http_headers=headers_compartilhados
            )
            
            # APLICAR COOKIES COMPARTILHADOS
            cookies_playwright = [
                {
                    'name': name,
                    'value': value,
                    'domain': 'musical.congregacao.org.br',
                    'path': '/',
                    'httpOnly': False,
                    'secure': True
                }
                for name, value in cookies_compartilhados.items()
            ]
            context.add_cookies(cookies_playwright)
            
            pagina = context.new_page()
            
            # IR DIRETAMENTE PARA HIST√ìRICO
            print(f"üîÑ [P√°gina {numero_pagina}] Navegando diretamente para hist√≥rico...")
            pagina.goto("https://musical.congregacao.org.br/aulas_abertas", timeout=60000)
            
            # Aguardar p√°gina carregar completamente
            pagina.wait_for_load_state("networkidle", timeout=30000)
            
            # Configurar para 100 registros com retry
            configuracao_ok = False
            for tentativa in range(3):
                try:
                    print(f"‚öôÔ∏è [P√°gina {numero_pagina}] Tentativa {tentativa + 1} de configurar registros...")
                    pagina.wait_for_selector('select[name="listagem_length"]', timeout=TIMEOUT_SELECTOR)
                    pagina.select_option('select[name="listagem_length"]', "100")
                    time.sleep(3)
                    pagina.wait_for_load_state("networkidle", timeout=20000)
                    
                    # Verificar se a configura√ß√£o funcionou
                    pagina.wait_for_selector("table tbody tr", timeout=15000)
                    configuracao_ok = True
                    print(f"‚úÖ [P√°gina {numero_pagina}] Registros configurados com sucesso")
                    break
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è [P√°gina {numero_pagina}] Tentativa {tentativa + 1} falhou: {e}")
                    if tentativa < 2:
                        time.sleep(5)
                    else:
                        print(f"‚ö†Ô∏è [P√°gina {numero_pagina}] Prosseguindo sem configurar registros")
            
            # Navegar para a p√°gina espec√≠fica se n√£o for a primeira
            if numero_pagina > 1:
                print(f"üîÑ [P√°gina {numero_pagina}] Navegando para p√°gina {numero_pagina}...")
                navegacao_ok = False
                
                for tentativa in range(3):
                    try:
                        # M√©todo 1: Campo de input de p√°gina
                        input_pagina = pagina.query_selector('input[type="number"][aria-controls="listagem"]')
                        if input_pagina:
                            input_pagina.fill("")  # Limpar primeiro
                            time.sleep(0.5)
                            input_pagina.fill(str(numero_pagina))
                            pagina.keyboard.press("Enter")
                            time.sleep(3)
                            pagina.wait_for_load_state("networkidle", timeout=20000)
                            navegacao_ok = True
                            break
                        
                        # M√©todo 2: Link direto da p√°gina
                        link_pagina = pagina.query_selector(f'a:has-text("{numero_pagina}")')
                        if link_pagina and not navegacao_ok:
                            link_pagina.click()
                            time.sleep(3)
                            pagina.wait_for_load_state("networkidle", timeout=20000)
                            navegacao_ok = True
                            break
                        
                        # M√©todo 3: Bot√µes next (para p√°ginas pr√≥ximas)
                        if numero_pagina <= 5 and not navegacao_ok:
                            for i in range(numero_pagina - 1):
                                btn_proximo = pagina.query_selector("a:has(i.fa-chevron-right)")
                                if btn_proximo:
                                    parent = btn_proximo.query_selector("..")
                                    parent_class = parent.get_attribute("class") if parent else ""
                                    if "disabled" not in parent_class:
                                        btn_proximo.click()
                                        time.sleep(3)
                                        pagina.wait_for_load_state("networkidle", timeout=15000)
                                    else:
                                        break
                                else:
                                    break
                            navegacao_ok = True
                            break
                            
                    except Exception as nav_error:
                        print(f"‚ö†Ô∏è [P√°gina {numero_pagina}] Tentativa {tentativa + 1} de navega√ß√£o falhou: {nav_error}")
                        if tentativa < 2:
                            time.sleep(5)
                        else:
                            raise Exception(f"Falha em todas as tentativas de navega√ß√£o para p√°gina {numero_pagina}")
                
                if not navegacao_ok:
                    raise Exception(f"N√£o foi poss√≠vel navegar para a p√°gina {numero_pagina}")
            
            # Aguardar p√°gina da pagina√ß√£o carregar
            time.sleep(5)
            
            # Verificar se chegamos na p√°gina correta
            try:
                pagina.wait_for_selector("table tbody tr", timeout=15000)
            except:
                print(f"‚ö†Ô∏è [P√°gina {numero_pagina}] Timeout aguardando linhas")
            
            # Criar sess√£o requests com cookies compartilhados
            session = requests.Session()
            session.cookies.update(cookies_compartilhados)
            session.headers.update(headers_compartilhados)
            
            # Processar aulas da p√°gina
            resultado_pagina = []
            deve_parar = False
            
            total_linhas = contar_linhas_na_pagina(pagina)
            
            if total_linhas == 0:
                print(f"üèÅ [P√°gina {numero_pagina}] P√°gina {numero_pagina} n√£o tem linhas")
                navegador.close()
                resultado_queue.put((numero_pagina, []))
                return
            
            print(f"üìä [P√°gina {numero_pagina}] {total_linhas} aulas encontradas")
            
            # Processar cada linha da p√°gina
            for i in range(total_linhas):
                dados_aula, deve_parar_ano = extrair_dados_de_linha_por_indice(pagina, i)
                
                if deve_parar_ano:
                    print(f"üõë [P√°gina {numero_pagina}] Encontrado ano 2024 - parando processo")
                    deve_parar = True
                    break
                
                if not dados_aula:
                    continue
                
                print(f"üéØ [P√°gina {numero_pagina}] Aula {i+1}/{total_linhas}: {dados_aula['data']}")
                
                try:
                    # Aguardar que n√£o haja modal aberto
                    try:
                        pagina.wait_for_selector("#modalFrequencia", state="hidden", timeout=5000)
                    except:
                        try:
                            pagina.keyboard.press("Escape")
                            time.sleep(1)
                        except:
                            pass
                    
                    # Clicar no bot√£o de frequ√™ncia
                    if clicar_botao_frequencia_por_indice(pagina, i):
                        time.sleep(DELAY_ENTRE_ACOES)
                        
                        # Processar dados de frequ√™ncia
                        freq_data = processar_frequencia_modal(pagina, dados_aula['aula_id'], dados_aula['professor_id'])
                        
                        # Fechar modal
                        try:
                            btn_fechar = pagina.query_selector('button.btn-warning[data-dismiss="modal"]:has-text("Fechar")')
                            if btn_fechar:
                                btn_fechar.click()
                            else:
                                # Tentar outras formas de fechar
                                try:
                                    pagina.evaluate("$('#modalFrequencia').modal('hide')")
                                except:
                                    pagina.keyboard.press("Escape")
                            
                            pagina.wait_for_selector("#modalFrequencia", state="hidden", timeout=10000)
                        except:
                            try:
                                pagina.keyboard.press("Escape")
                                time.sleep(1)
                            except:
                                pass
                        
                        time.sleep(DELAY_ENTRE_ACOES)
                        
                        # Obter detalhes da ATA
                        ata_status = extrair_detalhes_aula(session, dados_aula['aula_id'])
                        
                        # Montar resultado
                        linha_resultado = [
                            dados_aula['congregacao'],
                            dados_aula['curso'],
                            dados_aula['turma'],
                            dados_aula['data'],
                            "; ".join(freq_data['presentes_ids']),
                            "; ".join(freq_data['presentes_nomes']),
                            "; ".join(freq_data['ausentes_ids']),
                            "; ".join(freq_data['ausentes_nomes']),
                            freq_data['tem_presenca'],
                            ata_status
                        ]
                        
                        resultado_pagina.append(linha_resultado)
                        
                        print(f"‚úì [P√°gina {numero_pagina}] {len(freq_data['presentes_ids'])} presentes, {len(freq_data['ausentes_ids'])} ausentes - ATA: {ata_status}")
                    
                    else:
                        print(f"‚ùå [P√°gina {numero_pagina}] Falha ao clicar no bot√£o de frequ√™ncia")
                        
                except Exception as e:
                    print(f"‚ö†Ô∏è [P√°gina {numero_pagina}] Erro ao processar aula: {e}")
                    continue
                
                time.sleep(1)  # Delay entre aulas
                
                if deve_parar:
                    break
            
            print(f"‚úÖ [P√°gina {numero_pagina}] Conclu√≠da: {len(resultado_pagina)} aulas processadas")
            
            navegador.close()
            resultado_queue.put((numero_pagina, resultado_pagina))
            
    except Exception as e:
        print(f"‚ùå [P√°gina {numero_pagina}] Erro cr√≠tico: {e}")
        erro_queue.put((numero_pagina, str(e)))

def processar_em_lotes(total_paginas, cookies_compartilhados, headers_compartilhados, session_data):
    """Processa p√°ginas em lotes menores para evitar sobrecarga"""
    print(f"\nüì¶ Processamento em lotes de {MAX_PROCESSOS_SIMULTANEOS} processos")
    
    resultado_queue = Queue()
    erro_queue = Queue()
    
    todos_resultados = []
    todos_erros = []
    
    # Dividir p√°ginas em lotes
    for lote_inicio in range(1, total_paginas + 1, MAX_PROCESSOS_SIMULTANEOS):
        lote_fim = min(lote_inicio + MAX_PROCESSOS_SIMULTANEOS - 1, total_paginas)
        
        print(f"\nüéØ Processando lote: p√°ginas {lote_inicio} a {lote_fim}")
        
        # Criar processos para este lote
        processos = []
        
        for numero_pagina in range(lote_inicio, lote_fim + 1):
            processo = Process(
                target=processar_pagina_com_cookies_compartilhados,
                args=(numero_pagina, cookies_compartilhados, headers_compartilhados, session_data, resultado_queue, erro_queue)
            )
            processo.start()
            processos.append(processo)
            print(f"   ‚úÖ Processo {numero_pagina} iniciado (PID: {processo.pid})")
            time.sleep(DELAY_ENTRE_INICIALIZACOES)
        
        # Aguardar todos os processos do lote terminarem
        print(f"‚è≥ Aguardando {len(processos)} processos do lote...")
        
        for i, processo in enumerate(processos, lote_inicio):
            processo.join(timeout=TIMEOUT_POR_PAGINA)
            
            if processo.is_alive():
                print(f"‚ö†Ô∏è Processo {i} excedeu timeout, terminando...")
                processo.terminate()
                processo.join()
            else:
                print(f"‚úÖ Processo {i} finalizado")
        
        # Coletar resultados do lote
        while True:
            try:
                numero_pagina, resultado_pagina = resultado_queue.get_nowait()
                todos_resultados.extend(resultado_pagina)
                print(f"üìã Lote: P√°gina {numero_pagina} coletada - {len(resultado_pagina)} aulas")
            except queue.Empty:
                break
        
        # Coletar erros do lote
        while True:
            try:
                numero_pagina, erro = erro_queue.get_nowait()
                todos_erros.append(f"P√°gina {numero_pagina}: {erro}")
            except queue.Empty:
                break
        
        print(f"‚úÖ Lote {lote_inicio}-{lote_fim} conclu√≠do")
        
        # Delay entre lotes para n√£o sobrecarregar o servidor
        if lote_fim < total_paginas:
            print("‚è≥ Aguardando entre lotes...")
            time.sleep(10)
    
    return todos_resultados, todos_erros

def main():
    tempo_inicio = time.time()
    
    # FASE 1: Login Global √önico
    print("=" * 60)
    print("üöÄ INICIANDO SCRAPER OTIMIZADO E ROBUSTO")
    print("=" * 60)
    
    cookie_manager = CookieManager()
    
    try:
        total_paginas = cookie_manager.fazer_login_global()
        cookies_compartilhados = cookie_manager.get_cookies()
        headers_compartilhados = cookie_manager.get_headers()
        session_data = cookie_manager.get_session_data()
    except Exception as e:
        print(f"‚ùå Falha no login global: {e}")
        return
    
    if not cookies_compartilhados:
        print("‚ùå N√£o foi poss√≠vel obter cookies de autentica√ß√£o")
        return
    
    # Limitar p√°ginas para teste/seguran√ßa
    total_paginas = min(total_paginas, 30)
    
    print(f"üéØ Total de p√°ginas a processar: {total_paginas}")
    print(f"üç™ Cookies compartilhados: {len(cookies_compartilhados)}")
    print(f"‚öôÔ∏è M√°ximo de processos simult√¢neos: {MAX_PROCESSOS_SIMULTANEOS}")
    
    # FASE 2: Processamento em Lotes
    print("\n" + "=" * 60)
    print("‚ö° INICIANDO PROCESSAMENTO EM LOTES")
    print("=" * 60)
    
    # Configurar multiprocessing
    mp.set_start_method('spawn', force=True)
    
    try:
        todos_resultados, todos_erros = processar_em_lotes(
            total_paginas, cookies_compartilhados, headers_compartilhados, session_data
        )
    except Exception as e:
        print(f"‚ùå Erro durante processamento em lotes: {e}")
        todos_resultados, todos_erros = [], [str(e)]
    
    # FASE 3: Organizar Resultados
    print("\n" + "=" * 60)
    print("üìä ORGANIZANDO RESULTADOS")
    print("=" * 60)
    
    print(f"‚úÖ Total de aulas coletadas: {len(todos_resultados)}")
    
    # FASE 4: Enviar para Google Sheets
    if todos_resultados:
        print("\nüì§ Enviando dados para Google Sheets...")
        
        headers = [
            "CONGREGA√á√ÉO", "CURSO", "TURMA", "DATA", "PRESENTES IDs", 
            "PRESENTES Nomes", "AUSENTES IDs", "AUSENTES Nomes", "TEM PRESEN√áA", "ATA DA AULA"
        ]
        
        # Ordenar por data
        try:
            todos_resultados.sort(key=lambda x: datetime.strptime(x[3], "%d/%m/%Y"), reverse=True)
            print("‚úÖ Resultados ordenados por data")
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel ordenar por data: {e}")
        
        body = {
            "tipo": "historico_aulas_robusto",
            "dados": todos_resultados,
            "headers": headers,
            "resumo": {
                "total_aulas": len(todos_resultados),
                "tempo_processamento": f"{(time.time() - tempo_inicio) / 60:.1f} minutos",
                "paginas_processadas": total_paginas,
                "modo": "lotes_robustos",
                "processos_por_lote": MAX_PROCESSOS_SIMULTANEOS,
                "login_unico": True,
                "erros_encontrados": len(todos_erros)
            }
        }
        
        try:
            resposta_post = requests.post(URL_APPS_SCRIPT, json=body, timeout=180)
            print("‚úÖ Dados enviados para Google Sheets!")
            print(f"Status: {resposta_post.status_code}")
            if resposta_post.text:
                print(f"Resposta: {resposta_post.text[:200]}...")
        except Exception as e:
            print(f"‚ùå Erro ao enviar para Apps Script: {e}")
    
    # FASE 5: Resumo Final
    print("\n" + "=" * 60)
    print("üìà RESUMO DA EXECU√á√ÉO ROBUSTA")
    print("=" * 60)
    
    tempo_total = (time.time() - tempo_inicio) / 60
    
    print(f"üéØ Total de aulas processadas: {len(todos_resultados)}")
    print(f"üìÑ P√°ginas processadas: {total_paginas}")
    print(f"‚ö° Modo: Lotes Robustos (Login Compartilhado)")
    print(f"üöÄ Processos por lote: {MAX_PROCESSOS_SIMULTANEOS}")
    print(f"‚è±Ô∏è Tempo total: {tempo_total:.1f} minutos")
    
    # Estat√≠sticas detalhadas
    if todos_resultados:
        aulas_com_presenca = sum(1 for linha in todos_resultados if linha[8] == "OK")
        aulas_com_ata = sum(1 for linha in todos_resultados if linha[9] == "OK")
        
        print(f"üë• Aulas com presen√ßa: {aulas_com_presenca}/{len(todos_resultados)} ({(aulas_com_presenca/len(todos_resultados)*100):.1f}%)")
        print(f"üìù Aulas com ATA: {aulas_com_ata}/{len(todos_resultados)} ({(aulas_com_ata/len(todos_resultados)*100):.1f}%)")
        
        # An√°lise temporal
        try:
            datas_processadas = []
            for linha in todos_resultados:
                try:
                    data = datetime.strptime(linha[3], "%d/%m/%Y")
                    datas_processadas.append(data)
                except:
                    continue
            
            if datas_processadas:
                data_mais_antiga = min(datas_processadas)
                data_mais_recente = max(datas_processadas)
                print(f"üìÖ Per√≠odo processado: {data_mais_antiga.strftime('%d/%m/%Y')} a {data_mais_recente.strftime('%d/%m/%Y')}")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na an√°lise temporal: {e}")
    
    # Mostrar erros se houver
    if todos_erros:
        print("\n‚ö†Ô∏è ERROS ENCONTRADOS:")
        for erro in todos_erros[:5]:  # Mostrar apenas os primeiros 5 erros
            print(f"   ‚Ä¢ {erro}")
        if len(todos_erros) > 5:
            print(f"   ‚Ä¢ ... e mais {len(todos_erros) - 5} erros")
    
    # An√°lise de efici√™ncia
    print(f"\nüî¨ MELHORIAS IMPLEMENTADAS:")
    print(f"   ‚Ä¢ Login √∫nico: ‚úÖ (vs m√∫ltiplos logins)")
    print(f"   ‚Ä¢ Processamento em lotes: ‚úÖ (vs todos simult√¢neos)")
    print(f"   ‚Ä¢ Timeouts aumentados: ‚úÖ (30s vs 10s)")
    print(f"   ‚Ä¢ Retry em opera√ß√µes cr√≠ticas: ‚úÖ")
    print(f"   ‚Ä¢ Delays entre a√ß√µes: ‚úÖ")
    print(f"   ‚Ä¢ Melhor tratamento de erros: ‚úÖ")
    
    if tempo_total > 0 and todos_resultados:
        aulas_por_minuto = len(todos_resultados) / tempo_total
        print(f"   ‚Ä¢ Velocidade alcan√ßada: {aulas_por_minuto:.1f} aulas/minuto")

if __name__ == "__main__":
    main()
