name: Executar Scripts Diariamente

on:
  schedule:
    - cron: '0 12 12 * *'  # Todo dia 12 de cada mês às 12:00 UTC (09h Brasília)
  workflow_dispatch:        # Permite disparo manual
  
jobs:
  run-scripts:
    runs-on: ubuntu-latest
    env:
      # Credenciais existentes
      LOGIN_MUSICAL: ${{ secrets.LOGIN_MUSICAL }}
      SENHA_MUSICAL: ${{ secrets.SENHA_MUSICAL }}
      
      # Novas credenciais Supabase
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      
    steps:
      - name: Clonar o repositório
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache de dependências
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install playwright beautifulsoup4 requests python-dotenv supabase
          pip install -r requirements.txt || echo "Arquivo requirements.txt não encontrado"
          
      - name: Instalar navegadores do Playwright
        run: python -m playwright install chromium
        
      - name: Verificar conexão Supabase
        run: |
          python -c "
          import os
          from supabase import create_client
          try:
              url = os.environ.get('SUPABASE_URL')
              key = os.environ.get('SUPABASE_KEY')
              if not url or not key:
                  raise Exception('Credenciais Supabase não encontradas')
              supabase = create_client(url, key)
              print('✅ Conexão Supabase OK')
          except Exception as e:
              print(f'❌ Erro Supabase: {e}')
              exit(1)
          "
          
      - name: Executar script_historicoaulas.py
        run: python script_historicoaulas.py
        continue-on-error: false
        
      - name: Backup em caso de erro
        if: failure()
        run: |
          echo "Script falhou. Verificar logs acima."
          # Opcional: enviar notificação por email/slack
          
      - name: Log de sucesso
        if: success()
        run: echo "✅ Execução concluída com sucesso!"
