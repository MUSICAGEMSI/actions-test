name: Musical Analytics - Execu√ß√£o Di√°ria

on:
  schedule:
    - cron: '0 12 12 * *'  # Todo dia 12 de cada m√™s √†s 12:00 UTC (09h Bras√≠lia)
  workflow_dispatch:        # Permite disparo manual
  
jobs:
  run-scripts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Clonar o reposit√≥rio
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache de depend√™ncias
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Instalar depend√™ncias b√°sicas
        run: |
          python -m pip install --upgrade pip
          echo "üì¶ Instalando depend√™ncias b√°sicas..."
          
      - name: Instalar depend√™ncias do requirements.txt
        run: |
          if [ -f requirements.txt ]; then
            echo "üìã Arquivo requirements.txt encontrado. Instalando..."
            pip install -r requirements.txt
          else
            echo "‚ö†Ô∏è Arquivo requirements.txt n√£o encontrado. Instalando depend√™ncias manualmente..."
            pip install supabase pandas python-dotenv matplotlib seaborn openpyxl numpy
          fi
          
      - name: Instalar depend√™ncias web scraping
        run: |
          pip install playwright beautifulsoup4 requests
          
      - name: Instalar navegadores do Playwright
        run: |
          python -m playwright install chromium
          
      - name: Criar arquivo de credenciais
        run: |
          echo "üîê Criando arquivo de credenciais..."
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > credencial.env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_KEY }}" >> credencial.env
          echo "LOGIN_MUSICAL=${{ secrets.LOGIN_MUSICAL }}" >> credencial.env
          echo "SENHA_MUSICAL=${{ secrets.SENHA_MUSICAL }}" >> credencial.env
          
      - name: Verificar depend√™ncias instaladas
        run: |
          echo "üîç Verificando depend√™ncias..."
          python -c "
          import sys
          try:
              import pandas as pd
              print('‚úÖ pandas:', pd.__version__)
          except ImportError as e:
              print('‚ùå pandas n√£o encontrado:', e)
              sys.exit(1)
          
          try:
              import supabase
              print('‚úÖ supabase: OK')
          except ImportError as e:
              print('‚ùå supabase n√£o encontrado:', e)
              sys.exit(1)
              
          try:
              from dotenv import load_dotenv
              print('‚úÖ python-dotenv: OK')
          except ImportError as e:
              print('‚ùå python-dotenv n√£o encontrado:', e)
              sys.exit(1)
          
          print('‚úÖ Todas as depend√™ncias OK!')
          "
          
      - name: Verificar conex√£o Supabase
        run: |
          python -c "
          import os
          from dotenv import load_dotenv
          from supabase import create_client
          
          load_dotenv('credencial.env')
          
          try:
              url = os.environ.get('SUPABASE_URL')
              key = os.environ.get('SUPABASE_ANON_KEY')
              
              if not url or not key:
                  raise Exception('Credenciais Supabase n√£o encontradas')
              
              supabase = create_client(url, key)
              print('‚úÖ Conex√£o Supabase estabelecida com sucesso!')
              
          except Exception as e:
              print(f'‚ùå Erro na conex√£o Supabase: {e}')
              exit(1)
          "
          
      - name: Executar script principal
        run: |
          echo "üöÄ Iniciando execu√ß√£o do script..."
          python script_historicoaulas.py
          
      - name: Executar an√°lise musical (se existir)
        run: |
          if [ -f musical_analytics.py ]; then
            echo "üìä Executando an√°lise musical..."
            python musical_analytics.py
          else
            echo "‚ö†Ô∏è Arquivo musical_analytics.py n√£o encontrado"
          fi
        continue-on-error: true
        
      - name: Upload de artefatos gerados
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: relatorios-musicais-${{ github.run_number }}
          path: |
            *.xlsx
            *.png
            *.log
            *.csv
          retention-days: 30
          
      - name: Limpeza de arquivos sens√≠veis
        if: always()
        run: |
          echo "üßπ Limpando arquivos sens√≠veis..."
          rm -f credencial.env
          
      - name: Log de sucesso
        if: success()
        run: |
          echo "‚úÖ Execu√ß√£o conclu√≠da com sucesso!"
          echo "üìÖ Data/Hora: $(date)"
          
      - name: Log de erro
        if: failure()
        run: |
          echo "‚ùå Script falhou. Verificar logs acima."
          echo "üìÖ Data/Hora: $(date)"
