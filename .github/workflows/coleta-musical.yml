name: Coleta Musical Ultra Rápida

on:
  workflow_dispatch:
    inputs:
      script_name:
        description: 'Script para executar'
        required: true
        default: 'coletor_ultra_otimizado_15min.py'
        type: choice
        options:
          - script_seq1.py
          - script_det.py
          - script_seq2.py
          - script_seq3.py
          - script_nivel.py
          - script_matriculados.py
          - script_det.py
          - script_expandido.py
          - script_turma.py
          - coletor_realtime_output.py
          - script_individualht.py
          - script_localidadesht.py
          - script_alunosht.py
          - script_turmasht.py
          - script_historicoht.py
          - script_ministerio.py
          - script_usuarios.py
          - script_orquestraccb1.py
          - script_localidadesccb.py

jobs:
  coleta:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 🔥 6 HORAS - Tempo máximo do GitHub Actions
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Instalar dependências do sistema
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-dev libxslt-dev
      
      - name: Instalar dependências Python
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install chromium --with-deps
      
      # 🔥 OTIMIZAÇÃO CRÍTICA: Kernel Linux para alta concorrência
      - name: Otimizar kernel Linux para performance extrema
        run: |
          echo "🔧 Configurando kernel para 2.000 conexões simultâneas..."
          sudo sysctl -w net.ipv4.ip_local_port_range="1024 65535"
          sudo sysctl -w net.ipv4.tcp_tw_reuse=1
          sudo sysctl -w net.ipv4.tcp_fin_timeout=15
          sudo sysctl -w net.core.somaxconn=65535
          sudo sysctl -w net.core.netdev_max_backlog=65535
          sudo sysctl -w fs.file-max=2000000
          sudo sysctl -w net.ipv4.tcp_max_syn_backlog=8192
          sudo sysctl -w net.ipv4.tcp_keepalive_time=600
          sudo sysctl -w net.ipv4.tcp_keepalive_probes=3
          sudo sysctl -w net.ipv4.tcp_keepalive_intvl=15
          echo "✓ Kernel otimizado para performance extrema"
          echo "📊 Configurações aplicadas:"
          sysctl net.ipv4.ip_local_port_range
          sysctl net.core.somaxconn
          echo "File descriptors: $(ulimit -n)"
      
      - name: Verificar instalação
        run: |
          echo "📦 Verificando pacotes instalados..."
          pip list | grep -E "httpx|h2|beautifulsoup4|playwright"
          python -c "import httpx; print(f'✓ httpx version: {httpx.__version__}')"
          python -c "import h2; print(f'✓ h2 (HTTP/2) version: {h2.__version__}')"
          python -c "import asyncio; print(f'✓ asyncio disponível')"
      
      - name: Executar coleta SEM LIMITE DE TEMPO
        env:
          LOGIN_MUSICAL: ${{ secrets.LOGIN_MUSICAL }}
          SENHA_MUSICAL: ${{ secrets.SENHA_MUSICAL }}
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🚀 EXECUTANDO COLETA SEM LIMITE DE TEMPO"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📜 Script: ${{ github.event.inputs.script_name }}"
          echo "⏱️  Timeout: 6 HORAS (máximo do GitHub Actions)"
          echo "🎯 Estratégia: 3 Fases com Retry até completar"
          echo "💪 O script executará até processar TODOS os IDs"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          python ${{ github.event.inputs.script_name }}
      
      - name: Upload de artefatos em caso de erro
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: debug-screenshots-${{ github.run_number }}
          path: |
            debug_*.png
            debug_*.html
            backup_*.json
            checkpoint_coleta.json
          retention-days: 7
          if-no-files-found: ignore
      
      - name: Upload de logs e backups
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coleta-completa-${{ github.run_number }}
          path: |
            backup_*.json
            checkpoint_coleta.json
            *.log
          retention-days: 30
          if-no-files-found: ignore
      
      - name: Relatório de Performance Final
        if: always()
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 RELATÓRIO FINAL DE EXECUÇÃO"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "⏱️  Status: ${{ job.status }}"
          echo "📜 Script: ${{ github.event.inputs.script_name }}"
          echo "🔢 Run Number: ${{ github.run_number }}"
          echo "📅 Data/Hora: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Coleta finalizada com SUCESSO!"
          elif [ "${{ job.status }}" == "failure" ]; then
            echo "❌ Coleta finalizou com ERRO"
          else
            echo "⚠️  Coleta foi CANCELADA ou teve timeout"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
